/*
 * Copyright (c) 2014, salesforce.com, inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 *    Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 *    following disclaimer.
 *  
 *    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and 
 *    the following disclaimer in the documentation and/or other materials provided with the distribution. 
 *    
 *    Neither the name of salesforce.com, inc. nor the names of its contributors may be used to endorse or 
 *    promote products derived from this software without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR 
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */
package  com.sforce.dataset.loader.file.schema;

import java.util.LinkedList;
import java.util.List;

public class ObjectType {	
//	 private long id; //(generated by Workflow when the object is instantiated)
//	 private String alias; //(generated by Workflow when the object is instantiated)
//	 public String catalog; //(optional)
//	 public String schema; //(optional)
	 public String name = null; //(Required)
	 public String fullyQualifiedName = null; //(Optional Defaults to name)
	 public String connector = null; //(optional - CSV, SFDC, Workday, etc)
//	 public String recordTypeIdentifier = null; //(optional - Needed for files there are multiple record types in the same file)
	 public String label = null; //(Optional - defaults to name)
	 public String description = null; //(optional)
//	 public boolean isPrimaryObject = true; //(optional)
//	 public String acl = null; //(optional)
	 public String rowLevelSecurityFilter = null; //(Required)
	 //public boolean supportsIncrementalExtract = false; //(optional)
	 public List<FieldType> fields = null;
	 
	public ObjectType() {
		super();
	}
	 
	public ObjectType(ObjectType old) 
	{
		super();
		if(old!=null)
		{
			this.connector = old.connector;
			this.description = old.description;
			this.fields = new LinkedList<FieldType>();
			if(old.fields!=null)
			{
				for(FieldType obj:old.fields)
				{
					this.fields.add(new FieldType(obj));
				}
			}
			this.fullyQualifiedName = old.fullyQualifiedName;
			this.label = old.fullyQualifiedName;
			this.name = old.name;
			this.rowLevelSecurityFilter = old.rowLevelSecurityFilter;
		
			if(!this.equals(old))
			{
				System.out.println("ObjectType Copy constructor is missing functionality");
			}
		}
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((connector == null) ? 0 : connector.hashCode());
		result = prime * result
				+ ((description == null) ? 0 : description.hashCode());
		result = prime * result + ((fields == null) ? 0 : fields.hashCode());
		result = prime
				* result
				+ ((fullyQualifiedName == null) ? 0 : fullyQualifiedName
						.hashCode());
		result = prime * result + ((label == null) ? 0 : label.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime
				* result
				+ ((rowLevelSecurityFilter == null) ? 0
						: rowLevelSecurityFilter.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		ObjectType other = (ObjectType) obj;
		if (connector == null) {
			if (other.connector != null) {
				return false;
			}
		} else if (!connector.equals(other.connector)) {
			return false;
		}
		if (description == null) {
			if (other.description != null) {
				return false;
			}
		} else if (!description.equals(other.description)) {
			return false;
		}
		if (fields == null) {
			if (other.fields != null) {
				return false;
			}
		} else if (!fields.equals(other.fields)) {
			return false;
		}
		if (fullyQualifiedName == null) {
			if (other.fullyQualifiedName != null) {
				return false;
			}
		} else if (!fullyQualifiedName.equals(other.fullyQualifiedName)) {
			return false;
		}
		if (label == null) {
			if (other.label != null) {
				return false;
			}
		} else if (!label.equals(other.label)) {
			return false;
		}
		if (name == null) {
			if (other.name != null) {
				return false;
			}
		} else if (!name.equals(other.name)) {
			return false;
		}
		if (rowLevelSecurityFilter == null) {
			if (other.rowLevelSecurityFilter != null) {
				return false;
			}
		} else if (!rowLevelSecurityFilter.equals(other.rowLevelSecurityFilter)) {
			return false;
		}
		return true;
	}

	 
	 
	 

	 
}
